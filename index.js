const TelegramBot = require('node-telegram-bot-api');
const request = require('request');
const stym=require('static-yandex-map');
const mongoose = require('mongoose');
const ymaps = require('ymaps');

const https = require('https');
const url = require('url');

const weather_app_id = "f1bcc65e";
const weather_app_key = "045b08148266c1ff3be30d337c632722";

mongoose.connect("mongodb://localhost/handyDB");
mongoose.Promise = global.Promise;

let connection = mongoose.connection;
let usersTable = null;

connection.once('open', function () {
    connection.db.collection("user", function(err, collection){
        usersTable = collection;
        /*collection.find({tgID: 323}).toArray(function(err, data){
            console.log('result: ' + data[0]);// it will print your collection data
        });*/
    });
});


let token = '560722483:AAEoI7WdqU0_sfw1W8zZ6uJ3sYvnKqM0H7U';
let bot = new TelegramBot(token, {polling: true});

let opts = {
    reply_markup: JSON.stringify({
        keyboard: [
            ['/help','/sethome'],
            [{
                text: "My location",
                request_location: true
            }]
        ],
        resize_keyboard: true
    })
};


bot.onText(/\/exchange/i, function (msg) {
    const adwancedOptions = {
        reply_to_message_id: msg.message_id,
        reply_to_message_text: msg.text,
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{ text: 'BTC-USD', callback_data: 'bt-us' }],
                [{ text: 'BTC-RUR', callback_data: 'bt-ru' }],
                [{ text: 'BTC-EUR', callback_data: 'bt-eu' }],
                [{ text: 'LTC-USD', callback_data: 'lt-us' }],
                [{ text: 'LTC-RUR', callback_data: 'lt-ru' }],
                [{ text: 'LTC-EUR', callback_data: 'lt-eu' }],
                [{ text: 'RUR-EUR', callback_data: 'ru-eu' }],
                [{ text: 'RUR-USD', callback_data: 'ru-us' }],
            ],
            one_time_keyboard: true,
            selective: true
        })
    };

    bot.sendMessage(msg.from.id, "–ö–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –Ω—É–∂–Ω–∞?", adwancedOptions);

    bot.on('callback_query', function (callback) {
        const msg = callback.message;
        console.log(callback.message);
        console.log(callback.data);
        let answer = callback.data;

        if (answer === 'bt-us') {
            let url = 'https://wex.nz/api/3/ticker/btc_usd';
            request(url, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    let bodyJson = JSON.parse(body);
                    let message = '–ü—Ä–æ–¥–∞–∂–∞ 1 BTC: ' + bodyJson.btc_usd.sell + '$ üá∫üá∏ \r\n';
                    message += '–ü–æ–∫—É–ø–∫–∞ 1 BTC: ' + bodyJson.btc_usd.buy + '$ üá∫üá∏';
                    bot.answerCallbackQuery(callback.id)
                        .then(() => bot.sendMessage(msg.chat.id, message));
                }
            });
        } else if (answer === 'bt-ru') {
            let url = 'https://wex.nz/api/3/ticker/btc_rur';
            request(url, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    let bodyJson = JSON.parse(body);
                    let message = '–ü—Ä–æ–¥–∞–∂–∞ 1 BTC: ' + bodyJson.btc_rur.sell + 'p. üá∑üá∫ \r\n';
                    message += '–ü–æ–∫—É–ø–∫–∞ 1 BTC: ' + bodyJson.btc_rur.buy + 'p. üá∑üá∫';
                    bot.answerCallbackQuery(callback.id)
                        .then(() => bot.sendMessage(msg.chat.id, message));
                }
            });
        } else if (answer === 'bt-eu') {
            let url = 'https://wex.nz/api/3/ticker/btc_eur';
            request(url, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    let bodyJson = JSON.parse(body);
                    let message = '–ü—Ä–æ–¥–∞–∂–∞ 1 BTC: ' + bodyJson.btc_eur.sell + ' &#8364; \r\n';
                    message += '–ü–æ–∫—É–ø–∫–∞ 1 BTC: ' + bodyJson.btc_eur.buy + ' &#8364;';
                    bot.answerCallbackQuery(callback.id)
                        .then(() => bot.sendMessage(msg.chat.id, message));
                }
            });
        } else if (answer === 'lt-us') {
            let url = 'https://wex.nz/api/3/ticker/ltc_usd';
            request(url, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    let bodyJson = JSON.parse(body);
                    let message = '–ü—Ä–æ–¥–∞–∂–∞ 1 LTC: ' + bodyJson.ltc_usd.sell + '$ üá∫üá∏ \r\n';
                    message += '–ü–æ–∫—É–ø–∫–∞ 1 LTC: ' + bodyJson.ltc_usd.buy + '$ üá∫üá∏';
                    bot.answerCallbackQuery(callback.id)
                        .then(() => bot.sendMessage(msg.chat.id, message));
                }
            });
        }else if(answer === 'lt-ru') {
            let url = 'https://wex.nz/api/3/ticker/ltc_rur';
            request(url, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    let bodyJson = JSON.parse(body);
                    let message = '–ü—Ä–æ–¥–∞–∂–∞ 1 LTC: ' + bodyJson.ltc_rur.sell + 'p. üá∑üá∫ \r\n';
                    message += '–ü–æ–∫—É–ø–∫–∞ 1 LTC: ' + bodyJson.ltc_rur.buy + 'p. üá∑üá∫';
                    bot.answerCallbackQuery(callback.id)
                        .then(() => bot.sendMessage(msg.chat.id, message));
                }
            });
        }else if (answer === 'lt-eu') {
            let url = 'https://wex.nz/api/3/ticker/ltc_eur';
            request(url, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    let bodyJson = JSON.parse(body);
                    let message = '–ü—Ä–æ–¥–∞–∂–∞ 1 LTC: ' + bodyJson.ltc_eur.sell + ' ‚Ç¨; \r\n';
                    message += '–ü–æ–∫—É–ø–∫–∞ 1 LTC: ' + bodyJson.ltc_eur.buy + ' ‚Ç¨;';
                    bot.answerCallbackQuery(callback.id)
                        .then(() => bot.sendMessage(msg.chat.id, message));
                }
            });
        }else if(answer === 'ru-us') {
            let url = 'https://wex.nz/api/3/ticker/usd_rur';
            request(url, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    let bodyJson = JSON.parse(body);
                    let message = '–ü—Ä–æ–¥–∞–∂–∞ 1 USD: ' + bodyJson.usd_rur.sell + '$ üá∫üá∏ \r\n';
                    message += '–ü–æ–∫—É–ø–∫–∞ 1 USD: ' + bodyJson.usd_rur.buy + '$ üá∫üá∏';
                    bot.answerCallbackQuery(callback.id)
                        .then(() => bot.sendMessage(msg.chat.id, message));
                }
            });
        }else if(answer === 'ru-eu') {
            let url = 'https://wex.nz/api/3/ticker/eur_rur';
            request(url, function (error, response, body) {
                if (!error && response.statusCode === 200) {
                    let bodyJson = JSON.parse(body);
                    let message = '–ü—Ä–æ–¥–∞–∂–∞ 1 EUR: ' + bodyJson.eur_rur.sell + ' ‚Ç¨; \r\n';
                    message += '–ü–æ–∫—É–ø–∫–∞ 1 EUR: ' + bodyJson.eur_rur.buy + ' ‚Ç¨;';
                    bot.answerCallbackQuery(callback.id)
                        .then(() => bot.sendMessage(msg.chat.id, message));
                }
            });
        }
    });
});

bot.onText(/–°–∫–∞–∂–∏ (.+)/i, function (msg, match) {
    bot.sendMessage(msg.from.id, match[1]);
});

bot.onText(/–°–ø–∞—Å–∏–±–æ/i, function (msg) {
    bot.sendMessage(msg.from.id, '–Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º:)');
});

bot.onText(/–ü—Ä–∏–≤–µ—Ç/i, function (msg) {
    if(msg.chat.id === 356127672){
        bot.sendMessage(msg.from.id, '–î–æ–ª–≥–æ–π –∂–∏–∑–Ω–∏ —Ç–µ–±–µ, –∑–∞ —Ç–æ, —á—Ç–æ —Å–æ–∑–¥–∞–ª –º–µ–Ω—è!');
    }else if(msg.chat.id === 434038737){
        bot.sendMessage(msg.from.id, '–ö–æ—Ç–∏–∫, –µ—Ç–æ —Ç—ã?! –ï—Ç–æ –ø—Ä–∞–≤–¥–∞ —Ç—ã!? –ü—Ä–∏–≤–µ—Ç–∏–∫:3');
    }else if(msg.chat.id === 144074802){
        bot.sendMessage(msg.from.id, '–ê –≤–æ—Ç —Ç—ã —Ç–∞–∫–æ–π —Å–µ–±–µ. –Ω–µ –±—É–¥—É —Å —Ç–æ–±–æ–π –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è:(');
    }else {
        bot.sendMessage(msg.from.id, '–ü—Ä–∏–≤–µ—Ç, ' + msg.from.first_name);
    }
});

bot.onText(/\/nearestmetro/i, function (msg) {
    let myCoords =[];

    bot.sendMessage(msg.from.id, '–ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?', {
        reply_markup: JSON.stringify({
            keyboard: [
                [{
                    text: "–í–æ—Ç —Ç—É—Ç.",
                    request_location: true
                }]
            ],
            resize_keyboard: true
        })
    });

    bot.once("location",(msg)=>{
            myCoords = [msg.location.longitude,msg.location.latitude];

            //let url = 'https://geocode-maps.yandex.ru/1.x/?format=json&geocode=54.7388,55.9721'/*'+myCoords[0] +',' +myCoords[1] +'*/ +'&spn=0.032069,0.030552&kind=metro&rspn=1';
            let url = 'https://geocode-maps.yandex.ru/1.x/?format=json&geocode='+myCoords[0] +',' +myCoords[1]+'&spn=0.032069,0.030552&kind=metro&rspn=1';
            console.dir('url: ' +url);
            request(url, { json: true }, (err, res, body) => {
                if (err) {
                    bot.sendMessage(msg.chat.id, "–û—à–∏–±–æ—á–∫–∞:( –ë—É–¥–µ–º –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å.");
                    return console.log(err);
                }
                let metros = body.response.GeoObjectCollection.featureMember;
                //console.log(metros[0].GeoObject.Point);
                if(metros.length!==0) {
                    let  s=new stym(myCoords[0],myCoords[1])
                        .setType('map')
                        .setSize(650,450)
                        .setZ(13)
                        .setLang('en-US');
                    for (let i = 0; i < metros.length; i++) {
                        s.addPoint(metros[i].GeoObject.Point.pos.split(' ')[0],metros[i].GeoObject.Point.pos.split(' ')[1],'pm2','rd','l',i+1);
                    }
                    bot.sendMessage(msg.chat.id, "–û—Ç–ª–∏—á–Ω–æ. –í–æ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –∫ —Ç–µ–±–µ —Å—Ç–∞–Ω—Ü–∏–∏: \n" + s.getUrl());
                    //s.getUrl();
                }else{
                    bot.sendMessage(msg.from.id, '–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç –º–µ—Ç—Ä–æ:(');
                }
            });
    });
});


bot.onText(/–ü–æ–∫–∞–∂–∏/i, function (msg, match) {
    bot.sendMessage(msg.from.id, '–í—ã –Ω–µ —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∫–∞–∑–∞—Ç—å. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
});


bot.onText(/–ü–æ–∫–∞–∂–∏ (.+)/i, function (msg, match) {
    let myCoords =[];

    console.log('match: ' +match);
    let string = match[1].split(' ');
    string = string.join('%20');


    console.log('mycoords: ' +myCoords);
    let url = 'https://geocode-maps.yandex.ru/1.x/?format=json&geocode='+match[1] + '';
    console.log('url: ' +url);
    request(url, { json: true }, (err, res, body) => {
        if (err) { return console.log(err); }
        console.log('url:' +url);
        let place = body.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;
        if(place.length!==0) {
            let  s=new stym(place.split(' ')[0],place.split(' ')[1])
                .setType('map')
                .setSize(650,450)
                .setZ(13)
                .setLang('en-US')
                .addPoint(place.split(' ')[0],place.split(' ')[1],'pm2','rd','l',1);
            bot.sendMessage(msg.chat.id, "–û—Ç–ª–∏—á–Ω–æ. –í–æ—Ç –º–µ—Å—Ç–æ, –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–ª: \n" + s.getUrl());
        }else{
            bot.sendMessage(msg.from.id, '–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç –º–µ—Ç—Ä–æ:(');
        }
    });

});

bot.onText(/\/traffic/i, function (msg) {
    let myCoords =[];

    bot.sendMessage(msg.from.id, '–ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?', {
        reply_markup: JSON.stringify({
            keyboard: [
                [{
                    text: "–í–æ—Ç —Ç—É—Ç.",
                    request_location: true
                }]
            ],
            resize_keyboard: true
        })
    });

    bot.once("location",(msg)=>{
        myCoords = [msg.location.longitude,msg.location.latitude];
        console.log('mycoords: ' +myCoords);
        let  s=new stym(myCoords[0],myCoords[1])
            .setType('traffic')
            .setSize(650,450)
            .setZ(14)
            .setLang('en-US');
        bot.sendMessage(msg.chat.id, "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º —Ç–∞–∫–æ–≤–∞: \n" + s.getUrl());
    });
});

bot.onText(/\/currentweather/i, function (msg) {

    bot.sendMessage(msg.from.id, '–í—ã–±–µ—Ä–µ—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:', {
        reply_markup: JSON.stringify({
            keyboard: [
                [{
                    text: "Home location",
                    request_location: false
                }],
                [{
                    text: "Current location",
                    request_location: true
                }]
            ],
            resize_keyboard: true
        })
    });

    bot.once("location",(msg)=>{
        myCoords = [msg.location.longitude,msg.location.latitude].join(',');
        console.log('myCoords: ' + myCoords);
        let url = 'http://api.weatherunlocked.com/api/current/' + myCoords + '?lang=ru&app_id=' + weather_app_id + '&app_key=' + weather_app_key + '';
        console.dir('url: ' + url);
        request(url, {json: true}, (err, res, body) => {
            if (err) {
                return console.log(err);
            }
            bot.sendMessage(msg.from.id, '<b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ —É –≤–∞—Å:</b>\n       –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: '+body.temp_c+'C\n       –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: '+body.windspd_ms+'–º/—Å \n       –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: '+body.windspd_ms, {parse_mode: 'HTML'});
        });
    });

    bot.on('message', function (msg) {
        console.log(msg.text);
        if(msg.text === "Home location") {
            usersTable.find({tgID: msg.chat.id}).toArray(function (err, data) {
                myCoords = data[0].home_location;
                console.log('myCoords: ' + myCoords);
                let url = 'http://api.weatherunlocked.com/api/current/' + myCoords[1] + ',' + myCoords[0] + '?lang=ru&app_id=' + weather_app_id + '&app_key=' + weather_app_key + '';
                console.dir('url: ' + url);
                request(url, {json: true}, (err, res, body) => {
                    if (err) {
                        return console.log(err);
                    }
                    bot.sendMessage(msg.from.id, '<b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ —É –≤–∞—Å:</b>\n       –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: '+body.temp_c+'C\n       –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: '+body.windspd_ms+'–º/—Å \n       –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: '+body.windspd_ms, {parse_mode: 'HTML'});
                });
            });
        }
    });
});

bot.onText(/\/forecastweather/i, function (msg) {
    bot.sendMessage(msg.from.id, '–í—ã–±–µ—Ä–µ—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:', {
        reply_markup: JSON.stringify({
            keyboard: [
                [{
                    text: "Home location c/w",
                    request_location: false
                }],
                [{
                    text: "Current location",
                    request_location: true
                }]
            ],
            resize_keyboard: true
        })
    });

    bot.on('message', function (msg) {
        console.log(msg.text);
        if(msg.text === "Home location c/w") {
            usersTable.find({tgID: msg.chat.id}).toArray(function (err, data) {
                myCoords = data[0].home_location;
                console.log('myCoords: ' + myCoords);
                let url = 'http://api.weatherunlocked.com/api/forecast/' + myCoords[1] + ',' + myCoords[0] + '?lang=ru&app_id=' + weather_app_id + '&app_key=' + weather_app_key + '';
                console.dir('url: ' + url);
                request(url, {json: true}, (err, res, body) => {
                    if (err) {
                        return console.log(err);
                    }
                    bot.sendMessage(msg.from.id, '<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n', {parse_mode: 'HTML'});
                    for (let i = 0; i < 7; i++) {
                        bot.sendMessage(msg.from.id, '<i>–î–∞—Ç–∞: ' + body.Days[i].date + '</i> \n       –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + body.Days[i].temp_max_c + 'C \n       –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + body.Days[i].temp_min_c + 'C\n       –í–æ—Å—Ö–æ–¥: ' + body.Days[i].sunrise_time + ' \n       –ó–∞–∫–∞—Ç: ' + body.Days[i].sunset_time, {parse_mode: 'HTML'});
                    }
                });
            });
        }
        bot.on('message', function (msg) {return false});
    });

    bot.once("location",(msg)=>{
        myCoords = [msg.location.longitude,msg.location.latitude].join(',');
        console.log('myCoords: ' + myCoords);
        let url = 'http://api.weatherunlocked.com/api/forecast/' + myCoords + '?lang=ru&app_id=' + weather_app_id + '&app_key=' + weather_app_key + '';
        console.dir('url: ' + url);
        request(url, {json: true}, (err, res, body) => {
            if (err) {
                return console.log(err);
            }
            bot.sendMessage(msg.from.id, '<b>–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n', {parse_mode: 'HTML'});
            for (let i = 0; i < 7; i++) {
                bot.sendMessage(msg.from.id, '<i>–î–∞—Ç–∞: ' + body.Days[i].date + '</i> \n       –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + body.Days[i].temp_max_c + 'C \n       –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + body.Days[i].temp_min_c + 'C\n       –í–æ—Å—Ö–æ–¥: ' + body.Days[i].sunrise_time + ' \n       –ó–∞–∫–∞—Ç: ' + body.Days[i].sunset_time, {parse_mode: 'HTML'});
            }
        });
    });
});

bot.onText(/\/SendPussy/i, function (msg) {
    let chatId = msg.chat.id;
    let number = randomInteger(1,10);
    let photo = 'assets/nudes/'+number+'.jpg';
    bot.sendPhoto(chatId, photo, {caption: '–ú–∏–ª—ã–µ –∫–æ—Ç—è—Ç–∞'});
});

let notes = [];

bot.onText(/–ù–∞–ø–æ–º–Ω–∏ (.+) –≤ (.+)/i, function (msg, match) {
    let userId = msg.from.id;
    let text = match[1];
    let time = match[2];

    notes.push( { 'uid':userId, 'time':time, 'text':text } );
    bot.sendMessage(userId, '–û—Ç–ª–∏—á–Ω–æ! –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω—é, –µ—Å–ª–∏ –Ω–µ —Å–¥–æ—Ö–Ω—É :)');
});

setInterval(function(){
    for (let i = 0; i < notes.length; i++){
        let curDate = new Date().getHours() + ':' + new Date().getMinutes();
        if ( notes[i]['time'] === curDate ) {
            bot.sendMessage(notes[i]['uid'], '–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –≤—ã –¥–æ–ª–∂–Ω—ã: '+ notes[i]['text'] + ' —Å–µ–π—á–∞—Å.');
            notes.splice(i,1);
        }
    }
},1000);

bot.onText(/start/, function (msg, match) {
    let userId = msg.from.id;
    usersTable.insert({tgID: msg.from.id, first_name: msg.from.first_name, last_name: msg.from.last_name, username: msg.from.username,});
    bot.sendMessage(userId, '–ù—É –ø—Ä–∏–≤–µ—Ç, –±—Ä–æ–¥—è–≥–∞! –ê —É —Ç–µ–±—è —Å–º–µ—à–Ω–æ–µ –∏–º—è, ' + msg.from.first_name + ' :)\n–¢—ã –≤–µ–¥—å –∑–Ω–∞–µ—à—å —á—Ç–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–µ–Ω—è –ø–æ–±–ª–∏–∂–µ —Ç–µ–±–µ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å /help ?', opts);
});

bot.onText(/\/help/, function (msg) {
    let userId = msg.from.id;
    bot.sendMessage(userId, '–•—É—Ö, —Ç–∞–∫, –Ω—É —à–æ, –º–∞–ª–æ–π, —Å–º–æ—Ç—Ä–∏ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —è —Ç–µ–±–µ —Ç—É—Ç —Å–Ω–∏–∑—É –Ω–∞–ø–∏—à—É.\n–ê —Ç–æ —Å–æ–≤—Å–µ–º –Ω–µ —Å–º–æ–∂–µ—à—å —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è.\n\n' +
        '–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–º–∞–Ω–¥:\n' +
        '/help - –î–ª—è —Å–ª–∞–±—ã—Ö.\n' +
        '/exchange - –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç.\n' +
        '/currentweather - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞.\n' +
        '/forecastweather - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é.\n' +
        '/nearestmetro - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ.\n' +
        '/traffic - –Ø –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–ª—Å—Ç—å –¥–æ—Ä–æ–≥.\n' +
        '/sethome - –°–∫–∞–∂–∏—Ç–µ –º–Ω–µ –≤–∞—à –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å.\n' +
        '/setphone - –î–∞–π—Ç–µ –º–Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä–æ—á–µ–∫.\n' +
        '\n–ü—Ä–∏–≤–µ—Ç - –∏ —è –≤–µ–∂–ª–∏–≤–æ —Å —Ç–æ–±–æ–π –ø–æ–∑–¥–æ—Ä–æ–≤–∞—é—Å—å.\n' +
        '–ü–æ–∫–∞–∂–∏ PLACE - –Ø –ø–æ–∫–∞–∂—É –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ.\n' +
        '–ù–∞–ø–æ–º–Ω–∏ ACTION –≤ TIME(–ß–ß:–ú–ú) - –ò —è –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–∏ –≥—Ä—è–∑–Ω—ã–µ –¥–µ–ª–∏—à–∫–∏. –ù–∞–¥–µ—é—Å—å —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –∫–æ–º–∞–Ω–¥—ã\n\n' +
        '–ù—É, —É–¥–∞—á–∏ —Ç–µ–±–µ, –ø—É—Ç–Ω–∏–∫!');
});

bot.onText(/\/sethome/, function (msg) {
    let userId = msg.from.id;

    bot.sendMessage(userId, '–ï—Å–ª–∏ —Ç—ã —Å–µ–π—á–∞—Å –¥–æ–º–∞, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏ —Å–Ω–∏–∑—É, –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å–æ–∫.', {
        reply_markup: JSON.stringify({
            keyboard: [
                [{
                    text: "Send Home Location",
                    request_location: true
                }]
            ],
            resize_keyboard: true
        })
    });

    bot.once("location",(msg)=>{
        bot.sendMessage(msg.chat.id, "Success! Your home is here: " + [msg.location.longitude,msg.location.latitude].join(";"));
        usersTable.update({tgID: msg.from.id},{$set:{home_location: [msg.location.longitude,msg.location.latitude]}});
    });
});

bot.onText(/\/setphone/, function (msg) {
    let userId = msg.from.id;

    bot.sendMessage(userId, 'text', {
        reply_markup: JSON.stringify({
            keyboard: [
                [{
                    text: "Send Phone Number",
                    request_contact: true
                }]
            ],
            resize_keyboard: true
        })
    });

    bot.once("contact",(msg)=>{
        bot.sendMessage(msg.chat.id, "Success! Your phone is: " + msg.contact.phone_number);
        usersTable.update({tgID: msg.from.id},{$set:{phone_number: msg.contact.phone_number}});
    });
});

function randomInteger(min, max) {
    let rand = min - 0.5 + Math.random() * (max - min + 1);
    rand = Math.round(rand);
    return rand;
}